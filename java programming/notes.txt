JAVA :

* java is an object oriented programming language.
  It was founded by James Gosling.

FEATURES OF JAVA :
*simple
*robust
*platform independent

DATA TYPES :
*Datatypes specifies the size and type of values that can be stored in an identifier.
 It is classified into two types:
 1.Primitive
   *byte,short,int,long,float,double,boolean,char
 2.Non-primitive
   *strings,arrays,classes

ARRAY :

*Array is a collection of value of same type.
*Array elements are stored in the form of index.
*index value starts from zero

OOPS Concept :

It is a methodology to design a program using classes and objects.

CLASS :
*class is a blueprint of design.
*it is a logical entity
*it contains variables and methods
Eg:
   class - Animal
   Object - Dog,Cat,Horse
OBJECTS :
*it is a instance of class
*it is a physical entity

TYPES OF VARIABLES :
*local variable
  int a=3;
*global variable
*static variable

Static variable :
*static variables are declared with the static keyword
  Static int a=7;
*static variables can be accesed by calling the class name
*it shares the same memory for all the objects
*memory allocation for the static is during the class loading time

FEATURES OF OOPS :
*data abstraction
*Inheritance
*polymorphism
*encapsulation

ENCAPSULATION
wrapping up of data and method in a single unit.
*we can achieve hiding and security
inorder to access the private variable outside the class we use getter and setter method.

POLYMORPHISM :

*One name many forms
*based on the attribute it behaves differently

In polymorphism we have 2 types :
 1.Compile time polymorphism
   *OVERLOADING - a class can have same method name with different arguments
 2.Run time polymorphism
   *OVER RIDING - different class can have same method with same parameters

INHERITANCE :

*It is a mechanism in which one class acquires the properties of another class
*we can reuse the field and methods of the existing class except private

TYPES OF INHERITANCE :
* Single inheritance :
  in single inheritance subclass inherits the features of one superclass
* Multilevel inheritance :
  in multilevel inheritance a child class will be inheriting a parent class & as well as this
  child class also acts as a parent class to other class.
* Hierarchial inheritance :
  in hierarchial inheritance one class serves as a superclass for morethan one subclass.
* Multiple inheritance(not supported)
* Hybrid inheritance(not supported)

SUPER keyword:
*The super keyword refers to superclass (parent) objects. It is used to call superclass methods, 
and to access the superclass constructor. 
The most common use of the super keyword is to eliminate the confusion between superclasses and 
subclasses that have methods with the same name.

THIS keyword:
The this keyword refers to the current object in a method or constructor. The most common use 
of the this keyword is to eliminate the confusion between class attributes and parameters
with the same name (because a class attribute is shadowed by a method or constructor parameter).

ENCAPSULATION:
Encapsulation in Java is a mechanism of wrapping the data (variables) and code acting on the data 
(methods) together as a single unit. In encapsulation, the variables of a class will be hidden 
from other classes, and can be accessed only through the methods of their current class.This is also known as
data hiding.
To achieve encapsulation in Java âˆ’
*Declare the variables of a class as private.
*Provide public setter and getter methods to modify and view the variables values.

POLYMORPHISM:
Polymorphism in Java is a concept by which we can perform a single action in different ways.
There are two types of polymorphism in Java: compile-time polymorphism and runtime polymorphism. 
We can perform polymorphism in java by method overloading and method overriding.
Runtime polymorphism:
Runtime polymorphism or Dynamic Method Dispatch is a process in which a call to an overridden 
method is resolved at runtime rather than compile-time.
In this process, an overridden method is called through the reference variable of a superclass.
Upcasting:
If the reference variable of Parent class refers to the object of Child class, it is known as upcasting.
IS-A Relationship:
In object-oriented programming, the concept of IS-A is a totally based on Inheritance.
HAS-A Relationship: 
Composition(HAS-A) simply mean the use of instance variables that are references to other objects. 
For example Maruti has Engine, or House has Bathroom.
Compile time Polymorphism:
Polymorphism that is resolved during compiler time is known as static polymorphism. 
Method overloading is an example of compile time polymorphism.
Method Overloading: 
This allows us to have more than one method having the same name, 
if the parameters of methods are different in number, sequence and data types of parameters. 

ABSTRACTION:
Data abstraction is the process of hiding certain details and showing only essential information to the user.
Abstraction can be achieved with either abstract classes or interfaces. 
The abstract keyword is a non-access modifier, used for classes and methods:
Abstract class: 
It is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).
Abstract method: 
It can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).

Interface in Java
An interface in Java is a blueprint of a class. It has static constants and abstract methods.
The interface in Java is a mechanism to achieve abstraction. 
There can be only abstract methods in the Java interface, not method body.

WRAPPER Class:
The wrapper class in Java provides the mechanism to convert primitive into object and object into primitive.

Type Casting:
Type casting is when you assign a value of one primitive data type to another type.
In Java, there are two types of casting:
Widening Casting (automatically) - converting a smaller type to a larger type size
byte -> short -> char -> int -> long -> float -> double
Narrowing Casting (manually) - converting a larger type to a smaller size type
double -> float -> long -> int -> char -> short -> byte

EXCEPTION HANDLING:
The Exception Handling in Java is one of the powerful mechanism to handle the runtime errors 
so that normal flow of the application can be maintained.
There are three types of exceptions:
-->Checked Exception
-->Unchecked Exception
-->Error
Java Exception Keywords:
**try -The "try" keyword is used to specify a block where we should place exception code. 
The try block must be followed by either catch or finally. It means, we can't use try block alone.
**catch -The "catch" block is used to handle the exception. 
It must be preceded by try block which means we can't use catch block alone. 
It can be followed by finally block later.
**finally -The "finally" block is used to execute the important code of the program.
 It is executed whether an exception is handled or not.
**throw -The "throw" keyword is used to throw an exception.
**throws -The "throws" keyword is used to declare exceptions. 
It doesn't throw an exception. It specifies that there may occur an exception in the method. 
It is always used with method signature.

Java String:
In Java, string is basically an object that represents sequence of char values.
Java String class provides a lot of methods to perform operations on strings such as compare(), 
concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc.
3 inbilt classes:
*String
*StringBuffer
*StringBuilder
There are two ways to create String object:
*By string literal
     String s="welcome";  
*By new keyword
     String s1="Welcome";  

COLLECTIONS in Java:
The Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.

Java Collection means a single unit of objects. Java Collection framework provides many interfaces 
(Set, List, Queue, Deque) and classes (ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet).

Iterator interface
Iterator interface provides the facility of iterating the elements in a forward direction only.

List Interface:
List interface is the child interface of Collection interface. It inhibits a list type data structure 
in which we can store the ordered collection of objects. It can have duplicate values.
List interface is implemented by the classes ArrayList, LinkedList, Vector, and Stack.

ArrayList:
The ArrayList class implements the List interface. 
It uses a dynamic array to store the duplicate element of different data types. 
The ArrayList class maintains the insertion order and is non-synchronized. 
The elements stored in the ArrayList class can be randomly accessed.

LinkedList:
LinkedList implements the Collection interface. It uses a doubly linked list internally to store the elements. 
It can store the duplicate elements. It maintains the insertion order and is not synchronized.  
In LinkedList, the manipulation is fast because no shifting is required.

Vector:
Vector uses a dynamic array to store the data elements. It is similar to ArrayList. However, 
It is synchronized and contains many methods that are not the part of Collection framework.

Stack:
The stack is the subclass of Vector. It implements the last-in-first-out data structure, 
i.e., Stack. The stack contains all of the methods of Vector class and also provides its 
methods like boolean push(), boolean peek(), boolean push(object o), which defines its properties.

Set Interface:
Set Interface in Java is present in java.util package. It extends the Collection interface. 
It represents the unordered set of elements which doesn't allow us to store the duplicate items. 
We can store at most one null value in Set. Set is implemented by HashSet, LinkedHashSet, and TreeSet.

HashSet:
HashSet class implements Set Interface. It represents the collection that uses a hash table for storage.
Hashing is used to store the elements in the HashSet. It contains unique items.

LinkedHashSet:
LinkedHashSet class represents the LinkedList implementation of Set Interface. 
It extends the HashSet class and implements Set interface. 
Like HashSet, It also contains unique elements. It maintains the insertion order and permits null elements.

TreeSet:
Java TreeSet class implements the Set interface that uses a tree for storage. Like HashSet, 
TreeSet also contains unique elements. However, the access and retrieval time of TreeSet is quite fast. 
The elements in TreeSet stored in ascending order.

